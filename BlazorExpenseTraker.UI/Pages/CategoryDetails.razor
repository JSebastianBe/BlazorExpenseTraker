@page "/categorydetails"
@page "/categorydetails/{id:int}"
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<div class="modal" tabindex="-1" style="display: block;" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1>Detalle de categoría</h1>
            </div>
            <div class="modal-body">
                @if (category== null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <Antiforgery />
                    <EditForm Model="@category" OnValidSubmit="OnValidSubmit" FormName="categoryForm">
                        <DataAnnotationsValidator/>
                        <!--<ValidationSummary/>-->
                        <table class="table">
                            <tr>
                                <td>Nombre</td>

                                <td><InputText @bind-Value="category.Name" /></td>
                            </tr>
                            <tr>
                                <td colspan="2"> <ValidationMessage For="@(() => category.Name)"/> </td>
                            </tr>
                            <tr>
                                <td colspan="2" style="text-align: center;">
                                    <input type="submit" value="Guardar">
                                    <input type="button" value="Cancelar" @onclick="Cancel">
                                </td>
                            </tr>
                        </table>

                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>
@code {

    [Parameter]
    public int id {get; set;}
    private Category category = new Category();


    protected async override Task OnInitializedAsync(){
        if(id>0)
        {
            category = await CategoryService.GetCategoryDetails(id);
        }
        NavigationManager.LocationChanged += LocationChange; 
    }
    protected async Task OnValidSubmit(){
        try
        {
            await CategoryService.SaveCategory(category);
            NavigateToCategories();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar la categoría: {ex.Message}");
        }
    }

    public void Cancel(){
        NavigateToCategories();
    }

    public void NavigateToCategories(){
        NavigationManager.NavigateTo("/categories");
    }
    void LocationChange(object sender, LocationChangedEventArgs e){
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "Code"; 
    }

}
